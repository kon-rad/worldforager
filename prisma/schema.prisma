// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("PLANET_SCALE_DATABASE_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  relationMode = "prisma"
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Account {
  id     String @id @default(cuid())
  userId String @map("user_id")
  type   String

  provider String?

  providerAccountId String @map("provider_account_id")

  refresh_token String? @db.Text
  access_token  String? @db.Text

  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  appcode       String?   @default("worldforager")

  accounts Account[]
  sessions Session[]

  credits           Int  @default(150)
  docsUploadCount   Int? @default(0) // this is for PDF doc uploads
  chatMessagesCount Int? @default(0) // this is for all ai chats - with PDF chat

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  thirtyDayChallengeCount               Int?      @default(0)
  thirtyDayChallengePR                  Int?      @default(0)
  thirtyDayChallengeLastSubmitTimestamp DateTime?

  biography String? @db.LongText

  telegramUserId Int?

  Document             Document[]
  GenPosts             GenPosts[]
  CreditChangeLog      CreditChangeLog[]
  SubscriptionLog      SubscriptionLog[]
  Feedback             Feedback[]
  SuggestedImagePrompt SuggestedImagePrompt[]
  GenImage             GenImage[]
  EmailList            EmailList[]
  DocumentUpload       DocumentUpload[]
  AiClone              AiClone[]
  UserChatbot          UserChatbot[]
  ChatHistory          ChatHistory[]
  UserWeeklyGoals      UserWeeklyGoals[]
  UserTelegramId       UserTelegramId[]
  VoiceNote            VoiceNote[]
  Tool                 Tool[]
  Message              Message[]
  Chat                 Chat[]

  username          String?
  usernameUpdatedAt DateTime?
  FrozenDocument    FrozenDocument[]
  UserBadges        UserBadges[]
  DocumentVectorIds DocumentVectorIds[]
  TelegramUser      TelegramUser[]
  WF_StudioId       WF_StudioId[]

  @@map(name: "users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model CreditChangeLog {
  id           String   @id @default(cuid())
  creditChange Int?
  type         String?
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now()) @map(name: "created_at")
}

model SubscriptionLog {
  id     String @id @default(cuid())
  userId String @map("user_id")
  user   User?  @relation(fields: [userId], references: [id])

  stripeCustomerId       String?   @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  eventType String?
  createdAt DateTime @default(now()) @map(name: "created_at")
}

model Document {
  id           String    @id @default(uuid())
  title        String?   @db.Text
  content      String?   @db.LongText
  userId       String?   @db.Text
  slug         String?
  user         User?     @relation(fields: [userId], references: [id])
  parentFolder String?   @db.Text
  updatedAt    DateTime? @default(now()) @updatedAt
  createdAt    DateTime? @default(now())

  frozen      Boolean?  @default(false)
  isEncrypted Boolean?  @default(false)
  frozenAt    DateTime?
  type        String?
}

model GenPosts {
  id               String    @id @default(cuid())
  createdAt        DateTime?
  userId           String?   @db.Text
  user             User?     @relation(fields: [userId], references: [id])
  model            String?   @db.Text
  completionTokens String?   @db.Text
  prompt           String?   @db.Text
  promptTokens     String?   @db.Text
  totalTokens      String?   @db.Text
  modelId          String?   @db.Text
  content          String?   @db.Text
  title            String?   @db.Text
  genId            String?   @db.Text

  @@map(name: "gen_posts")
}

model SuggestedImagePrompt {
  id               String    @id @default(cuid())
  createdAt        DateTime?
  userId           String?   @db.Text
  user             User?     @relation(fields: [userId], references: [id])
  model            String?   @db.Text
  completionTokens String?   @db.Text
  prompt           String?   @db.Text
  promptTokens     String?   @db.Text
  totalTokens      String?   @db.Text
  modelId          String?   @db.Text
  content          String?   @db.Text
  genId            String?   @db.Text

  @@map(name: "suggested_image_prompt")
}

model GenImage {
  id               String    @id @default(cuid())
  createdAt        DateTime?
  userId           String?   @db.Text
  user             User?     @relation(fields: [userId], references: [id])
  model            String?   @db.Text
  completionTokens String?   @db.Text
  prompt           String?   @db.Text
  promptTokens     String?   @db.Text
  totalTokens      String?   @db.Text
  modelId          String?   @db.Text
  content          String?   @db.Text
  genId            String?   @db.Text

  @@map(name: "gen_image")
}

model Feedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String?  @map("user_id")
  name      String?
  email     String?
  feedback  String?

  user User? @relation(fields: [userId], references: [id])

  @@map(name: "feedbacks")
}

model EmailList {
  id        String   @id @default(cuid())
  name      String?
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  campaign  String
  userId    String?  @map("user_id")
  user      User?    @relation(fields: [userId], references: [id])

  @@map(name: "email_lists")
}

model DocumentUpload {
  id           String    @id @default(uuid())
  fileName     String?   @db.Text
  fileUrl      String?   @db.Text
  userId       String?   @db.Text
  user         User?     @relation(fields: [userId], references: [id])
  parentFolder String?   @db.Text
  tags         String?
  updatedAt    DateTime? @default(now()) @updatedAt
  createdAt    DateTime? @default(now())
  aiCloneId    String?   @db.Text
  aiClone      AiClone?  @relation(fields: [aiCloneId], references: [id])
}

model AiClone {
  id             String           @id @default(uuid())
  name           String?          @db.Text
  aiCloneBio     String?          @db.Text
  userId         String?          @map("user_id")
  published      Boolean?         @default(false)
  user           User?            @relation(fields: [userId], references: [id])
  tags           String?
  updatedAt      DateTime?        @default(now()) @updatedAt
  createdAt      DateTime?        @default(now())
  DocumentUpload DocumentUpload[]
}

model UserChatbot {
  id        String   @id @default(cuid())
  botName   String
  botId     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map(name: "user_chatbot")
}

model ChatHistory {
  id        String   @id @default(cuid())
  botId     String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  content   String?  @db.Text
  chatId    String
  isHuman   Boolean

  @@map(name: "chat_history")
}

model UserWeeklyGoals {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  goalEndDate DateTime
  content     String
  title       String

  @@map(name: "user_weekly_goals")
}

model UserTelegramId {
  id         String  @id @default(cuid())
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  chatId     Int
  firstName  String?
  username   String?
  telegramId Int

  @@map(name: "user_telegram_id")
}

model VoiceNote {
  id           String    @id @default(uuid())
  title        String?   @db.Text
  content      String?   @db.Text
  userId       String?   @db.Text
  slug         String?
  audioFileUrl String?
  summary      String?   @db.Text
  user         User?     @relation(fields: [userId], references: [id])
  parentFolder String?   @db.Text
  updatedAt    DateTime? @default(now()) @updatedAt
  createdAt    DateTime? @default(now())
}

model Tool {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  categories  String?
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  toolLink    String?
  links       String?
  imageUrl1   String?
  imageUrl2   String?
  imageUrl3   String?
  imageUrl4   String?

  categoriesItem   ToolCategories @relation(fields: [categoriesItemId], references: [id])
  categoriesItemId String

  @@map(name: "tools")
}

model ToolCategories {
  id   String @id @default(cuid())
  name String
  Tool Tool[]
}

model Message {
  id          String   @id @default(cuid())
  chatId      String
  content     String?  @db.MediumText
  role        String?  @db.Text
  createdAt   DateTime @default(now())
  model       String?  @db.Text
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  contextId   String?
  metadata    String?  @db.MediumText
  isEncrypted Boolean? @default(false)

  @@map(name: "messages")
}

model Chat {
  id        Int      @id @default(autoincrement())
  chatName  String?
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  contextId String?

  @@map(name: "chats")
}

model FrozenDocument {
  id        String    @id @default(uuid())
  title     String?   @db.Text
  content   String?   @db.LongText
  docType   String?   @db.Text
  userId    String?   @db.Text
  slug      String?
  user      User?     @relation(fields: [userId], references: [id])
  createdAt DateTime? @default(now())

  docId String?
}

model UserBadges {
  id        String    @id @default(uuid())
  createdAt DateTime? @default(now())
  userId    String?   @db.Text
  user      User?     @relation(fields: [userId], references: [id])
  badgeType String?
}

model DocumentVectorIds {
  id        String    @id @default(uuid())
  createdAt DateTime? @default(now())
  userId    String?   @db.Text
  user      User?     @relation(fields: [userId], references: [id])
  vectorId  Int
  docId     String
}

model TelegramUser {
  id               String    @id @default(uuid())
  createdAt        DateTime? @default(now())
  userId           String    @db.Text
  user             User      @relation(fields: [userId], references: [id])
  telegramUserId   Int?
  tgUsername       String?
  chatId           String?
  tgFirstName      String?
  tgLanguageCode   String?
  tgActivationCode Int?
  userEmail        String?
}

model WF_Prompt {
  id        String   @id @default(cuid())
  content   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  genId     String?
  userId    String?

  @@map("prompts")
}

model WF_Generated {
  id        String   @id @default(cuid())
  prompt    String?  @db.Text
  url       String?
  type      String?
  userId    String?
  model     String?
  studioId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WF_StudioId {
  id        String   @id @default(cuid())
  prompt    String?  @db.Text
  model     String?
  studioId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
}
